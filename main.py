import numpy as np
from geneticalgorithm import geneticalgorithm as ga

from ga_definition import Genetic_Algorithm_custom
from groq_api import get_response_from_groq
from preprocessing import Text_preprocessor

if __name__ == "__main__":
    with open('sample_article.txt', 'r') as file:
        article = file.read()
    tx_preprocessing = Text_preprocessor(article=article)
    tx_preprocessing.create_vocabulary()
    tx_preprocessing.tokenize_sentences()

    population_size = 100
    sequence_length = 10
    ga_alg = Genetic_Algorithm_custom(
        vocabulary_weights=tx_preprocessing.vocabulary_weights_word, sentences=tx_preprocessing.sentences
    )
    ga_alg.inicialize_random_population(population_size=population_size, sequence_length=sequence_length)
    algorithm_param = {
        "max_num_iteration": 30,
        "population_size": population_size,
        "mutation_probability": 0.01,
        "crossover_probability": 0.8,
        "parents_portion": 0.3,
        "elit_ratio": 0.01,
        "max_iteration_without_improv": 10,
        "crossover_type": "two_point",
    }
    dimension = sequence_length
    varbound = np.array([[0, 1]] * dimension)

    model = ga(
        function=ga_alg.fitness_function,
        dimension=dimension,
        variable_type="real",
        variable_boundaries=varbound,
        algorithm_parameters=algorithm_param,
    )
    model.mutation_function = lambda solution: ga_alg.delete_mutation(solution, algorithm_param["mutation_probability"])
    model.run()

    sentence = ga_alg.get_final_sentence(model.output_dict["variable"])
    print("Sentence generated by GA: %s", sentence)
    print("Sentence created by gemma-9b-it model: %s", get_response_from_groq(sentence))
